{"version":3,"sources":["App.tsx","reportWebVitals.js","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","parseKey","key","toString","split","length","TreeTitle","data","title","value","treeKey","includes","toFixed","TreeForm","updateTreeData","Form","useForm","form","useEffect","setFieldsValue","name","onFinish","values","onFinishFailed","errorInfo","console","log","Item","label","rules","required","message","formatter","v","replace","parser","type","htmlType","addTreeData","list","child","map","node","children","removeTreeData","parent","result","forEach","push","index","echartOptionsData","subtext","text","textStyle","fontSize","align","series","radius","nodeClick","emphasis","focus","itemStyle","borderRadius","borderWidth","show","params","levels","r0","r","rotate","position","padding","convertDataNode2SunBurstData","level","convertSunBurstData2DataNode","titleData","price","getAllKeys","nodes","App","useState","setTreeKey","selectData","setSelectData","sunBurstData","setSunBurstData","echartInstance","setEchartInstance","expandedKeys","setExpandedKeys","treeData","setTreeData","localStorage","getItem","JSON","parse","loadData","_","maxTotal","item","total","reduce","p","getEchartsInstance","setOption","setItem","stringify","className","ref","e","option","style","height","onClick","old","danger","info","autoExpandParent","showLine","onSelect","selectedKeys","selectedNodes","origin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59375ec2.chunk.js","sourcesContent":["\nimport './App.css';\n\nimport { Row, Col, Card, Tree, Form, Input, Button, message } from 'antd'\nimport React, { useEffect, useState } from 'react';\nimport { InputNumber } from 'antd';\nimport ReactECharts from 'echarts-for-react';\nimport EChartsReact from 'echarts-for-react';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst parseKey = (key?: any): number => {\n  if (!key) {\n    return 1;\n  }\n  const fields = key.toString().split('-');\n  return fields.length\n}\n\nconst TreeTitle = ({ data: { title, value }, treeKey }: { data: { title: string, value: number }, treeKey: React.Key }) => {\n  return (\n    <>\n      <div>{title} - <span>{parseKey(treeKey) === 4 ? '¥' : ''}{('' + value).includes('.') ? value.toFixed(2) : value}{parseKey(treeKey) !== 4 ? '%' : ''}</span></div>\n    </>\n  )\n}\n\ninterface DataNode {\n  title: React.ReactNode;\n  data: {\n    title: string;\n    value: number;\n    no?: string;\n  },\n  key: React.Key;\n  isLeaf?: boolean;\n  children?: DataNode[];\n}\n\nconst TreeForm = ({ treeKey, data, updateTreeData }: {\n  treeKey: React.Key,\n  data: DataNode,\n  updateTreeData: (treeKey: React.Key, data: DataNode) => any\n}) => {\n  const onFinish = (values: any) => {\n    if (!treeKey) {\n      return\n    }\n    if (values?.name && data) {\n      updateTreeData(treeKey, {\n        ...data,\n        title: <TreeTitle data={{ title: values.name, value: values.value }} treeKey={data.key} />,\n        data: {\n          title: values.name,\n          value: values.value\n        }\n      })\n    }\n\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const [form] = Form.useForm()\n  useEffect(() => {\n    form.setFieldsValue({ name: data.data.title, value: data.data.value || 0 })\n  }, [data, form])\n\n\n\n  const parseValue = (v?: string): string => {\n    const level = parseKey(treeKey);\n    if (level === 4) {\n      return v ? v.replace(/¥\\s?|(,*)/g, '') : '';\n    } else {\n      return v ? v.replace('%', '') : '';\n    }\n  }\n\n  const formatValue = (v?: string): string => {\n    if (parseKey(treeKey) === 4) {\n      return `¥ ${v}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n    }\n    return `${v}%`;\n  }\n  return (\n    <>\n      <Form\n        {...layout}\n        name=\"basic\"\n        form={form}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"name\"\n          name=\"name\"\n          rules={[{ required: true, message: 'Please input your name!' }]}\n        >\n          <Input\n          />\n        </Form.Item>\n\n        <Form.Item\n          label=\"value\"\n          name=\"value\"\n        >\n          <InputNumber\n            formatter={formatValue}\n            parser={parseValue}\n          />\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Save\n        </Button>\n        </Form.Item>\n      </Form>\n    </>\n  )\n}\n\n\nconst addTreeData = (list: DataNode[], key: React.Key, child: (children: DataNode[], key: React.Key) => DataNode): DataNode[] => {\n  return list.map(node => {\n    if (node.key === key) {\n      let children: DataNode[];\n      if (node.children) {\n        children = [...node.children, child(node.children, key)]\n      } else {\n        children = [child([], key)]\n      }\n      return {\n        ...node,\n        children\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: addTreeData(node.children, key, child),\n      };\n    }\n    return node;\n  });\n}\n\nconst updateTreeData = (list: DataNode[], key: React.Key, child: DataNode): DataNode[] => {\n  return list.map(node => {\n    if (node.key === key) {\n      return {\n        ...node,\n        ...child,\n      }\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, child),\n      };\n    }\n    return node;\n  })\n}\n\nconst removeTreeData = ({ parent, list, key }: { parent?: DataNode, list: DataNode[], key: React.Key }): DataNode[] => {\n  const result: DataNode[] = [];\n  list.forEach(node => {\n    if (node.key === key) {\n      return;\n    }\n    if (node.children) {\n      node.children = removeTreeData({ parent: node, list: node.children, key })\n      result.push(node);\n    } else {\n      result.push(node);\n    }\n  })\n\n  return result.map((node, index) => {\n    return {\n      ...node,\n      key: parent ? `${parent.key}-${index}` : `${index}`\n    }\n  });\n}\n\ninterface SunBurstData {\n  name: string;\n  value: number;\n  price?: number;\n  level?: number;\n  children?: SunBurstData[];\n}\n\nconst echartOptionsData: any = {\n  title: {\n    subtext: '',\n    text: '基金持仓分布',\n    textStyle: {\n      fontSize: 14,\n      align: 'center'\n    },\n  },\n  series: {\n    type: 'sunburst',\n    data: [],\n    radius: [50, '90%'],\n    nodeClick: false,\n    emphasis: {\n      focus: 'ancestor'\n    },\n    itemStyle: {\n      borderRadius: 5,\n      borderWidth: 2\n    },\n    label: {\n      show: true,\n      formatter: (params: any) => {\n        if (('' + params.value).includes('.')) {\n          return `${params.name} ${params.value?.toFixed(2)}%`\n        }\n        return `${params.name} ${params.value}%`\n      }\n    },\n    levels: [{\n    }, {\n      r0: '0%',\n      r: '30%',\n      label: {\n        rotate: 'radial',\n      }\n    }, {\n      r0: '30%',\n      r: '50%',\n      itemStyle: {\n        borderWidth: 2\n      },\n      label: {\n        rotate: 'radial'\n      }\n    }, {\n      r0: '50%',\n      r: '70%',\n      label: {\n        rotate: 'radial'\n      }\n    }, {\n      r0: '70%',\n      r: '72%',\n      label: {\n        rotate: 'radial',\n        position: 'outside',\n        padding: 0\n      },\n      itemStyle: {\n        borderWidth: 3\n      }\n    }]\n  }\n}\n\nconst convertDataNode2SunBurstData = (data: DataNode): SunBurstData => {\n  return {\n    name: data.data.title,\n    value: data.data.value,\n    level: parseKey(data.key),\n    children: data.children?.map(convertDataNode2SunBurstData)\n  }\n}\n\nconst convertSunBurstData2DataNode = ({ key, index, data }: { key?: string, index: number, data: SunBurstData }): DataNode => {\n  const titleData: { title: string, value: number } = {\n    title: data.name,\n    value: data.value,\n  }\n  key = key ? `${key}-${index}` : `${index}`\n  if (parseKey(key) === 4 && data?.price) {\n    titleData.value = data.price;\n  }\n  return {\n    title: <TreeTitle data={titleData} treeKey={key} />,\n    key,\n    data: titleData,\n    children: data?.children?.map((node, index) => convertSunBurstData2DataNode({\n      key,\n      index,\n      data: node,\n    })),\n  }\n}\n\nconst loadData = (): SunBurstData[] => {\n  const data = localStorage.getItem('cache');\n  return data ? JSON.parse(data) : [];\n}\n\nconst storeData = (data: SunBurstData[]) => {\n  localStorage.setItem('cache', JSON.stringify(data))\n}\n\nconst getAllKeys = (nodes?: DataNode[]): DataNode[] => {\n  const result: DataNode[] = [];\n  nodes?.forEach(node => {\n    result.push(node);\n    if (node?.children) {\n      getAllKeys(node?.children).forEach(node => result.push(node))\n    }\n  })\n  return result;;\n}\n\n\nconst App = () => {\n  const [treeKey, setTreeKey] = useState<React.Key>('');\n  const [selectData, setSelectData] = useState<DataNode | undefined>(void 0);\n  const [sunBurstData, setSunBurstData] = useState<SunBurstData[]>([]);\n  const [echartInstance, setEchartInstance] = useState<EChartsReact | null>();\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([]);\n\n  const [treeData, setTreeData] = useState<Array<DataNode>>([]);\n\n  const onSelect = (selectedKeys: React.Key[], info: any) => {\n    setTreeKey(selectedKeys[0])\n    setSelectData(info.selectedNodes[0]);\n  };\n\n\n  useEffect(() => {\n    const data = loadData();\n    setTreeData(_ => {\n      const result = data?.map((node, index) => convertSunBurstData2DataNode({ index, data: node }))\n      return result;\n    })\n  }, [])\n\n  useEffect(() => {\n    // convert treeData to sunBurstData\n    setSunBurstData(treeData.map(convertDataNode2SunBurstData));\n    setExpandedKeys(getAllKeys(treeData)?.map(node => node.key.toString()));\n  }, [treeData]);\n\n  useEffect(() => {\n    echartOptionsData.series.data = sunBurstData\n\n    // get all level 4 data\n    const result: SunBurstData[] = [];\n    let maxTotal = 0;\n    sunBurstData.forEach(item => {\n      item?.children?.forEach(item => item?.children?.forEach(item => {\n        const total = item?.children?.map(item => item.value)?.reduce((p, v) => p + v);\n        if (total && total / (item.value / 100) > maxTotal) {\n          maxTotal = total / (item.value / 100);\n        }\n        item?.children?.forEach(item => result.push(item));\n      }))\n    })\n    if (maxTotal > 0) {\n      echartOptionsData.title.subtext = `期望总资产 ¥${maxTotal.toFixed(0)}`\n      echartOptionsData.series.data.forEach((item: any) => {\n        // level 1\n        item?.children?.forEach((item: any) => {\n          // level 2\n          item?.children?.forEach((item: any) => {\n            // level 3\n            const total = item?.children?.map((data: any) => data.value)?.reduce((p: number, v: number) => p + v);\n            if (total) {\n              console.log(item.name, total);\n              item?.children?.forEach((data: any) => {\n                data.price = data.value;\n                console.log(data.name, data.value, total)\n                data.value = data.value * 100 / maxTotal;\n              })\n            }\n          })\n        })\n      })\n    }\n\n    if (result.length) {\n      console.log(result);\n      const total = result.map(item => item.price).reduce((p, v) => (p || 0) + (v || 0)) || 0;\n      echartOptionsData.title.subtext = `${echartOptionsData.title.subtext}，当前资产 ¥${total.toFixed(0)}，还差 ¥${(maxTotal - total).toFixed(0)}`;\n\n    }\n\n    echartInstance?.getEchartsInstance()?.setOption(echartOptionsData);\n    storeData(sunBurstData);\n  }, [sunBurstData, echartInstance]);\n\n\n  const addNewTree = (e: any) => {\n    if (treeKey) {\n      setTreeData(v => addTreeData(\n        v,\n        treeKey,\n        (children: DataNode[], key: React.Key) => {\n          const data = {\n            title: 'new Date',\n            value: 0\n          }\n          key = `${treeKey}-${children.length}`\n          return {\n            title: <TreeTitle data={data} treeKey={key} />,\n            data,\n            key\n          }\n        })\n      )\n    } else {\n      const data = {\n        title: 'new Date',\n        value: 0\n      }\n      setTreeData(old => [...old, {\n        title: <TreeTitle data={data} treeKey={`${old.length}`} />,\n        key: `${old.length}`,\n        data: {\n          title: 'new Date',\n          value: 0,\n        },\n        children: [],\n      }])\n    }\n  }\n\n  const update = (treeKey: React.Key, data: DataNode) => {\n    setTreeData(origin => [...updateTreeData(origin, treeKey, data)]);\n  }\n\n  const removeTree = (e: any) => {\n    if (!treeKey) {\n      return;\n    }\n    setTreeData(old => {\n      return removeTreeData({ list: old, key: treeKey });\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col span={treeKey && selectData ? 12 : 16} className=\"echarts\">\n          <Card>\n            <ReactECharts\n              ref={(e) => {\n                setEchartInstance(e);\n              }}\n              option={echartOptionsData}\n              style={{ height: '800px' }}\n            />\n          </Card>\n        </Col>\n        <Col span=\"8\">\n          <Card>\n            <div>\n              {parseKey(treeKey) !== 4 && <Button onClick={addNewTree}>新增</Button>}\n              <Button type=\"primary\" danger onClick={removeTree}>删除</Button>\n              <Button onClick={() => {\n                localStorage.setItem('backup', JSON.stringify(sunBurstData))\n                message.info('备份成功');\n              }}>手动备份</Button>\n            </div>\n            <div>\n              <Tree\n                autoExpandParent={true}\n                showLine={true}\n                expandedKeys={expandedKeys}\n                onSelect={onSelect}\n                treeData={treeData}\n              />\n            </div>\n          </Card>\n        </Col>\n        {treeKey && selectData &&\n          <Col span=\"4\">\n            <Row>\n              <Col>\n                <Card>\n                  {treeKey && selectData &&\n                    <TreeForm treeKey={treeKey} data={selectData} updateTreeData={update} />}\n                </Card>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                {/* <TextArea defaultValue={JSON.stringify(sunBurstData)} onChange={(e) => {\n                console.log(e.target.value);\n              }} /> */}\n              </Col>\n            </Row>\n\n          </Col>\n        }\n\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}